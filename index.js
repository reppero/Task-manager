// üìÅ backend/index.js
require('dotenv').config();

const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3001;
const SECRET = process.env.JWT_SECRET;

const path = require('path');

// –û—Ç–¥–∞—ë–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏–∑ –ø–∞–ø–∫–∏ build
app.use(express.static(path.join(__dirname, 'task-manager-frontend/build')));

app.use(cors({
  origin: process.env.CORS_ORIGIN || '*', // –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
  credentials: true
}));

app.use(bodyParser.json());

const db = new sqlite3.Database('./database.db');

// Create tables
const initDB = () => {
  db.run(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    username TEXT UNIQUE,
    password TEXT,
    role TEXT
  )`);

  db.run(`CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    description TEXT,
    due_date TEXT,
    status TEXT DEFAULT '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
  )`);

  db.run(`CREATE TABLE IF NOT EXISTS task_assignments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_id INTEGER,
    user_id INTEGER
  )`);

  db.run(`CREATE TABLE IF NOT EXISTS completion_requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_id INTEGER,
    user_id INTEGER,
    requested_at TEXT,
    status TEXT DEFAULT '–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
  )`);
};

initDB();

//  –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞

const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.sendStatus(401);

  jwt.verify(token, SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
app.post('/register', (req, res) => {
  const { name, username, password, role } = req.body;
  const hash = bcrypt.hashSync(password, 10);

  db.run(
    `INSERT INTO users (name, username, password, role) VALUES (?, ?, ?, ?)`,
    [name, username, hash, role],
    function (err) {
      if (err) return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω—è—Ç–æ' });
      res.json({ id: this.lastID });
    }
  );
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  db.get(`SELECT * FROM users WHERE username = ?`, [username], (err, user) => {
    if (!user || !bcrypt.compareSync(password, user.password)) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }
    const token = jwt.sign({ id: user.id, role: user.role }, SECRET);
    res.json({ token, user: { name: user.name, role: user.role } });
  });
});

//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

app.post('/users', authenticateToken, async (req, res) => {
  const { name, username, password, role } = req.body;

  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'Access denied' });
  }

  if (!name || !username || !password || !role) {
    return res.status(400).json({ message: 'Missing fields' });
  }

	//–Ω–æ–≤–∞—è —á–∞—Å—Ç—å
  db.get('SELECT * FROM users WHERE username = ?', [username], async (err, existingUser) => {
  if (existingUser) {
    return res.status(409).json({ message: 'Username already exists!' });
  }

  const hashedPassword = await bcrypt.hash(password, 10);

  db.run(
    `INSERT INTO users (name, username, password, role) VALUES (?, ?, ?, ?)`,
    [name, username, hashedPassword, role],
    function (err) {
      if (err) {
        console.error(err);
        return res.status(500).json({ message: 'Database error' });
      }

      res.json({ message: 'User created successfully' });
    }
  );
  });
  
  // –£–î–ê–õ–ò–¢–¨ –ü–û–ó–ñ–ï
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
app.post('/tasks', authenticateToken, (req, res) => {
  const { title, description, due_date, assignees } = req.body;

  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'Access denied' });
  }
  
  if (!title || title.trim() === '') {
    return res.status(400).json({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
  }

  if (!Array.isArray(assignees) || assignees.length === 0) {
    return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' });
  }
  
  db.run(
    `INSERT INTO tasks (title, description, due_date) VALUES (?, ?, ?)`,
    [title, description, due_date],
    function (err) {
      if (err) return res.status(500).json({ message: 'Database error' });

      const taskId = this.lastID;

      // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∑–∞–¥–∞—á—É
      const stmt = db.prepare(`INSERT INTO task_assignments (task_id, user_id) VALUES (?, ?)`);
      for (const userId of assignees) {
        stmt.run(taskId, userId);
      }
      stmt.finalize();

      res.json({ message: '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞' });
    }
  );
});

app.get('/all-users', authenticateToken, (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'Access denied' });
  }

  db.all(`SELECT id, name, username FROM users`, (err, rows) => {
    if (err) return res.status(500).json({ message: 'Database error' });
    res.json(rows);
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
app.get('/tasks', authenticateToken, (req, res) => {
  const userId = req.user.id;
  const userRole = req.user.role;

  let sql = `
    SELECT tasks.id, tasks.title, tasks.description, tasks.due_date, tasks.status,
      GROUP_CONCAT(users.name, ', ') as executors
    FROM tasks
    LEFT JOIN task_assignments ON tasks.id = task_assignments.task_id
    LEFT JOIN users ON task_assignments.user_id = users.id
  `;

  if (userRole === 'worker') {
    sql += ` WHERE users.id = ? `;
  }

  sql += ` GROUP BY tasks.id`;

  const params = userRole === 'worker' ? [userId] : [];

  db.all(sql, params, (err, rows) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(rows);
  });
});


// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/users', authenticateToken, (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'Access denied' });
  }
  db.all(`SELECT id, name, username, role FROM users`, [], (err, rows) => {
    if (err) return res.status(500).json({ message: err.message });
    res.json(rows);
  });
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
app.delete('/users/:id', authenticateToken, (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'Access denied' });
  }

  const userId = req.params.id;

  db.run(`DELETE FROM users WHERE id = ?`, [userId], function (err) {
    if (err) return res.status(500).json({ message: err.message });

    if (this.changes === 0) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω' });
  });
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
app.delete('/tasks/:id', authenticateToken, (req, res) => {
  const taskId = req.params.id;

  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'Access denied' });
  }

  // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  db.run(`DELETE FROM task_assignments WHERE task_id = ?`, [taskId], function (err) {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π' });

    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∑–∞–¥–∞—á—É
    db.run(`DELETE FROM tasks WHERE id = ?`, [taskId], function (err) {
      if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏' });

      if (this.changes === 0) {
        return res.status(404).json({ message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      res.json({ message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
    });
  });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/users/:id', authenticateToken, (req, res) => {
  const userId = parseInt(req.params.id);
  const { name, username, role } = req.body;

  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'Access denied' });
  }

  if (!name || !username || !role) {
    return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  if (!['admin', 'worker'].includes(role)) {
    return res.status(400).json({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å' });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  db.get(`SELECT * FROM users WHERE username = ? AND id != ?`, [username, userId], (err, existing) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });

    if (existing) {
      return res.status(400).json({ message: '–õ–æ–≥–∏–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' });
    }

    db.run(
      `UPDATE users SET name = ?, username = ?, role = ? WHERE id = ?`,
      [name, username, role, userId],
      function (err) {
        if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });

        if (this.changes === 0) {
          return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω' });
      }
    );
  });
});


//–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
app.put('/tasks/:id/status', authenticateToken, (req, res) => {
  const taskId = req.params.id;
  const { status } = req.body;

  db.run(`UPDATE tasks SET status = ? WHERE id = ?`, [status, taskId], function (err) {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
    res.json({ message: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω' });
  });
});

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

// –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ API) –æ—Ç–¥–∞—ë–º index.html
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'task-manager-frontend/build', 'index.html'));
});

